plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.5'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

bootRun {
	jvmArgs = ["-Dfile.encoding=UTF-8"]
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
	maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {
	// ✅ Spring Boot 기본
	implementation 'org.springframework.boot:spring-boot-starter-web'                // Spring MVC + REST
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'          // Thymeleaf 템플릿 엔진
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'           // Spring Data JPA (Hibernate)
	implementation 'org.springframework.boot:spring-boot-starter-validation'         // Bean Validation (JSR-303)

	// ✅ 테스트
	testImplementation 'org.springframework.boot:spring-boot-starter-test'           // JUnit, Mockito 등
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'                     // JUnit 런처
	developmentOnly 'org.springframework.boot:spring-boot-devtools'                  // 핫 리로딩

	// ✅ Lombok (코드 축약)
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// ✅ 데이터베이스 드라이버 (둘 중 하나만 사용 권장)
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'                                // MariaDB 드라이버
	// implementation 'mysql:mysql-connector-java:8.0.32'                             // (선택) MySQL 드라이버 - 위와 함께 사용하면 충돌 주의

	// ✅ 로그
	implementation 'org.slf4j:slf4j-api:2.0.3'                                         // 로깅 API (Logback 등 구현체와 함께 사용)

	// ✅ 비밀번호 해싱 (BCrypt)
	implementation 'org.mindrot:jbcrypt:0.3m'

	// ✅ JWT (토큰 인증용)
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'                                 // Jackson 기반 시리얼라이저

	// ✅ YouTube API 연동
	implementation 'com.google.api-client:google-api-client:1.33.0'
	implementation 'com.google.oauth-client:google-oauth-client-jetty:1.23.0'
	implementation 'com.google.apis:google-api-services-youtube:v3-rev20230816-2.0.0'
	implementation 'com.google.http-client:google-http-client-jackson2:1.39.2'

	// ✅ JSON(Java 8 Date/Time 타입 지원)
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.13.0'

	// ✅ HTML 파싱 (크롤링)
	implementation 'org.jsoup:jsoup:1.15.4'

	// ✅ QueryDSL (타입 안전한 쿼리)
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"
}

tasks.named('test') {
	useJUnitPlatform()
}

def querydslDir = "$buildDir/generated/querydsl"

sourceSets {
	main.java.srcDirs += querydslDir
}

tasks.withType(JavaCompile).configureEach {
	options.annotationProcessorGeneratedSourcesDirectory = file(querydslDir)
}
